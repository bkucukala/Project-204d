AWSTemplateFormatVersion: 2010-09-09
Description: |
  This project aims to deploy the Phonebook Application web application with Docker Swarm on Elastic Compute Cloud (EC2) Instances by pulling the app images from the AWS Elastic Container Registry (ECR) repository
  
Parameters:
  KeyPairName:
    Description:  Enter The name of your Key Pair for SSH Connections.
    Type: AWS::EC2::KeyPair::KeyName
    Default: Must be one of the existing EC2 KeyPair
Resources:
# Describing Managed Policy that gives SSH Connect to EC2 
  EC2InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"ec2:osuser": "ec2-user"}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
# Describing Iam Role that gives SSH Connect  and ECR Full Accces
  EC2InstanceConnectRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref EC2InstanceConnectPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
# Describing Profile that we attach the EC2InstanceConnectRole
  EC2InstanceConnectProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnectRole
#
#Define Security Group 
  DockerMachineSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH,HTTP and ports For Docker Machines" # Required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7496
          ToPort: 7496
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
# *****  CREATING LAUNCH TEMPLATES *******
#Launch Template Grand Master
  GrandMasterLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0ab4d1e9cf9a1215a
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds: 
          - !GetAtt DockerMachineSG.GroupId
        IamInstanceProfile: 
          Arn: !GetAtt EC2InstanceConnectProfile.Arn
        UserData: !Base64 |
          # /bin/bash
          yum update -y
          hostnamectl set-hostname Grand-Master
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker swarm init
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
          docker service create \
            --name=viz \
            --publish=8080:8080/tcp \
            --constraint=node.role==manager \
            --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
            dockersamples/visualizer
          yum install git -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-ecr-credential-helper -y
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json
          aws ecr create-repository \
              --repository-name ${APP_REPO_NAME} \
              --image-scanning-configuration scanOnPush=false \
              --image-tag-mutability MUTABLE \
              --region ${AWS::Region}
          docker build --force-rm -t "${ECR_REGISTRY}/${APP_REPO_NAME}:latest" ${GITHUB_REPO}
          docker push "${ECR_REGISTRY}/${APP_REPO_NAME}:latest"
          mkdir -p /home/ec2-user/phonebook
          cd /home/ec2-user/phonebook
          cat << EOF | tee .env
          ECR_REGISTRY=${ECR_REGISTRY}
          APP_REPO_NAME=${APP_REPO_NAME}
          EOF
          curl -o "docker-compose.yml" -L https://raw.githubusercontent.com/callahan-cw/pro-203/master/docker-compose.yml
          curl -o "init-db.py" -L https://raw.githubusercontent.com/callahan-cw/pro-203/master/init-phonebook-db.py
          docker-compose config | docker stack deploy --with-registry-auth -c - phonebook && docker run --network phonebook_clarusnet -v /home/ec2-user/phonebook:/app python:alpine sh -c 'pip install mysql-connector-python &&  python /app/init-db.py'
          - ECR_REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            APP_REPO_NAME: clarusway-repo/phonebook-app
            GITHUB_REPO: https://github.com/callahan-cw/pro-203.git
          # New change 
          curl -o "docker-compose.yml" -L ${GIT_FILE_URL}docker-compose.yml
          curl -o "init.sql" -L ${GIT_FILE_URL}init.sql
          docker-compose config | docker stack deploy --with-registry-auth -c - phonebook
          - ECR_REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            APP_REPO_NAME: clarusway-repo/phonebook-app
            GITHUB_REPO: https://github.com/callahan-cw/203.git
            GIT_FILE_URL: https://raw.githubusercontent.com/callahan-cw/203/master/
#****
#Launch Template Docker Swarm Manager
  DockerSwarmManagerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0ab4d1e9cf9a1215a
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds: 
          - !GetAtt DockerMachineSG.GroupId
        IamInstanceProfile: 
          Arn: !GetAtt EC2InstanceConnectProfile.Arn
        UserData: !Base64 |
          #! /bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install python3 -y
          pip3 install ec2instanceconnectcli
          eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
            --region ${AWS::Region} ${DockerManager1} docker swarm join-token manager | grep -i 'docker')"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-ecr-credential-helper -y
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json
#***
#Launch Template Docker Swarm Worker
  DockerSwarmWorkerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0ab4d1e9cf9a1215a
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds: 
          - !GetAtt DockerMachineSG.GroupId
        IamInstanceProfile: 
          Arn: !GetAtt EC2InstanceConnectProfile.Arn
        UserData: !Base64 |
          #! /bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install python3 -y
          pip3 install ec2instanceconnectcli
          eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
            --region ${AWS::Region} ${DockerManager1} docker swarm join-token worker | grep -i 'docker')"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install amazon-ecr-credential-helper -y
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json

# *****  CREATING LAUNCH TEMPLATES *******
#Launch Template Grand Master
  GrandMaster:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref GrandMasterLT
        Version: !GetAtt GrandMasterLT.LatestVersionNumber
      Tags:
        -                        
          Key: Name
          Value: !Sub Grand Master  ${AWS::StackName}

  Manager2:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DockerSwarmManagerLT
        Version: !GetAtt DockerSwarmManagerLT.LatestVersionNumber
      Tags:
        -                        
          Key: Name
          Value: !Sub Manager-2  ${AWS::StackName}

  Worker1:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DockerSwarmWorkerLT
        Version: !GetAtt DockerSwarmWorkerLT.LatestVersionNumber
      Tags:
        -                        
          Key: Name
          Value: !Sub Worker-1  ${AWS::StackName}

          
Outputs:
  DashboardGrandMaster:
    Description: Grand Master Dashboard
    Value: !Sub 
      - http://${PublicAddress}:8080
      - PublicAddress: !GetAtt GrandMaster.PublicDnsName
  DNSNameGrandMaster:
    Description: DNS Name of Grand Master 
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt GrandMaster.PublicDnsName
  DNSNameManager2:
    Description: DNS Name of Manager-2
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt Manager2.PublicDnsName
  DNSNameWorker1:
    Description: DNS Name of Worker-1
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt Worker1.PublicDnsName